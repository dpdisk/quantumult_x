<!DOCTYPE html><html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>📺 俾条蕉你食…</title>
    <style>
        :root {
            --primary-color: #4F46E5;
            --secondary-color: #818CF8;
            --background-color: #F3F4F6;
            --card-color: #FFFFFF;
            --text-color: #1F2937;
            --hover-color: #6366F1;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--background-color);
            min-height: 100vh;
            padding: 2rem 1rem;
            color: var(--text-color);
            transition: opacity 0.3s ease;
        }
        
        h2 {
          text-align: center;
        }

        .language-selector {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1001;
            background-color: var(--card-color);
            border-radius: 0.5rem;
            padding: 0.5rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border: 1px solid #E5E7EB;
        }

        .language-selector select {
            border: none;
            background: transparent;
            font-size: 0.875rem;
            color: var(--text-color);
            cursor: pointer;
            outline: none;
            padding: 0.25rem;
        }

        .translating-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 1rem 2rem;
            border-radius: 0.5rem;
            display: none;
            z-index: 2000;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            background-color: var(--card-color);
            border-radius: 1rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .title {
            font-size: 2rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 1.5rem;
            color: var(--primary-color);
            letter-spacing: -0.025em;
        }

        .subtitle {
            text-align: center;
            color: #6B7280;
            margin-bottom: 2rem;
            font-size: 0.875rem;
        }

        .subscription-grid {
            display: grid;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .subscription-link {
            background-color: var(--card-color);
            padding: 1rem;
            border-radius: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 2px solid #E5E7EB;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
            font-size: 1.125rem;
        }

        .subscription-link:hover {
            border-color: var(--primary-color);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.1);
        }

        .subscription-link .emoji {
            margin-right: 0.5rem;
            font-size: 1.25rem;
        }

        .small-links {
            display: flex;
            justify-content: center;
            gap: 1.5rem;
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid #E5E7EB;
            flex-wrap: wrap;
        }

        .small-links a {
            text-decoration: none;
            color: #6B7280;
            font-size: 0.875rem;
            transition: color 0.2s ease;
        }

        .small-links a:hover {
            color: var(--primary-color);
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background-color: var(--card-color);
            margin: 2rem auto;
            padding: 2rem;
            border-radius: 1rem;
            width: 90%;
            max-width: 600px;
            max-height: 85vh;
            position: relative;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
        }

        .update-content {
            overflow-y: auto;
            padding-right: 1rem;
            margin-right: -1rem;
            scrollbar-width: thin;
            scrollbar-color: #CBD5E1 transparent;
        }

        .update-content::-webkit-scrollbar {
            width: 6px;
        }

        .update-content::-webkit-scrollbar-track {
            background: transparent;
        }

        .update-content::-webkit-scrollbar-thumb {
            background-color: #CBD5E1;
            border-radius: 3px;
        }

        .update-content::-webkit-scrollbar-thumb:hover {
            background-color: #94A3B8;
        }

        .close-btn {
            position: absolute;
            right: 1.5rem;
            top: 1.5rem;
            font-size: 1.5rem;
            cursor: pointer;
            color: #6B7280;
            transition: color 0.2s ease;
            z-index: 1;
        }

        .close-btn:hover {
            color: var(--text-color);
        }

        .update-content h2 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
            position: sticky;
            top: 0;
            background-color: var(--card-color);
            padding: 0.5rem 0;
        }

        .update-section {
            border-left: 2px solid #E5E7EB;
            padding-left: 1rem;
            margin-bottom: 1.5rem;
        }

        .update-date {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .update-item {
            margin-bottom: 0.5rem;
            padding-left: 1rem;
            position: relative;
        }

        .update-item::before {
            content: "◦";
            position: absolute;
            left: 0;
            color: #6B7280;
        }

        .notice-text {
            color: #EF4444;
            font-weight: 500;
            text-align: center;
            margin-bottom: 1rem;
            padding: 0.5rem;
            border: 1px solid #FCA5A5;
            border-radius: 0.5rem;
            background-color: #FEF2F2;
        }

        @media (min-width: 640px) {
            .subscription-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 640px) {
            .small-links {
                gap: 1rem;
            }
            .language-selector {
                position: static;
                margin-bottom: 1rem;
                text-align: center;
            }
        }

        /* 翻译状态指示 */
        .translating {
            opacity: 0.7;
            pointer-events: none;
        }
    </style>
</head>
<body class="translating">
    <div class="language-selector">
        <select id="languageSelect" onchange="changeLanguage(this.value)">
            <option value="zh-CN">🇨🇳 简体中文</option>
            <option value="zh-TW">🇭🇰 繁體中文</option>
            <option value="en">🇺🇸 English</option>
            <option value="ja">🇯🇵 日本語</option>
            <option value="ko">🇰🇷 한국어</option>
            <option value="es">🇪🇸 Español</option>
            <option value="fr">🇫🇷 Français</option>
            <option value="de">🇩🇪 Deutsch</option>
            <option value="ru">🇷🇺 Русский</option>
            <option value="ar">🇸🇦 العربية</option>
        </select>
    </div>

    <div class="translating-indicator" id="translatingIndicator" style="display: block;">Translating.../Translating...</div>

    <div class="container">
        <h1 class="title">佛系收集，免费分享 😊</h1>
        <p class="subtitle">Live Episodes 🌟| Enjoy the Moment</p>
        
        <div class="subscription-grid">
            <div class="subscription-link" onclick="copySubscriptionLink('https://tv.iill.top/m3u/Gather')">
                <span class="emoji">📺</span>电视 直播
            </div>

            <div class="subscription-link" onclick="copySubscriptionLink('https://m.iill.top/Live.m3u')">
                <span class="emoji">🎥</span>网络 直播
            </div>

            <div class="subscription-link" onclick="copyMytvLink()">
                <span class="emoji">📡</span>myTV 直播
            </div>

            <div class="subscription-link" onclick="copySportLink()">
                <span class="emoji">🚴‍♂️</span>体育 直播
            </div>

            <div class="subscription-link" onclick="copyYsLink()">
                <span class="emoji">🎞️</span>影视 Json
            </div>

            <div class="subscription-link" onclick="copyShellLink()">
                <span class="emoji">💻</span>Shellscript</div>
        </div>

        <div class="small-links">
            <a href="https://github.com/YanG-1989" target="_blank">GitHub</a>
            <a href="https://t.me/Y_anGGGGGG" target="_blank">Telegram</a>
            <a href="https://epg.iill.top" target="_blank">EPG Viewer</a>
            <a href="https://yang-1989.eu.org/Conversion.php" target="_blank">格式转换</a>
            <a href="https://m.iill.top" target="_blank">直播录入</a>
            <a href="https://tv.yang-1989.eu.org/" target="_blank">影视搜索</a>
        </div>
    </div>

    <div id="updateModal" class="modal" style="display: block;">
        <div class="modal-content">
            <span class="close-btn" onclick="closeUpdateNotice()">×</span>
            <div class="update-content">
                <h2 style="text-align: center;">Pengumuman</h2>
                <div class="notice-text">请勿频繁刷新订阅..</div>
                
                <strong>㊀ · 更新日志 📝</strong>
                <div class="update-section">
                    <div class="update-date">• 9/14/2025</div>
                    <div class="update-item">维护 Live「更改订阅地址 / 取消 YouTube 限制」</div>

                    <div class="update-date">• 9/12/2025</div>
                    <div class="update-item">测试 咪咕系列「删除 tv-1 子域名」</div>

                    <div class="update-date">• 9.1.2025</div>
                    <div class="update-item">近期 维护总结「TG频道 查阅」</div>

                    <div class="update-date">• 8.20.2025</div>
                    <div class="update-item">Maintain Gather “New • Migu“ Overseas ”/Optimize“ Ads ”</div>

                    <div class="update-date">• 8.9.2025</div>
                    <div class="update-item">维护 Gather「•咪咕「TV」支持回看」</div>

                    <div class="update-date">• 8.8.2025</div>
                    <div class="update-item">Maintain Gather "Delete Japanese/Korean Grouping"</div>
                    <div class="update-item">维护 "广告"「兼容性 BUG」</div>

                    <div class="update-date">• 8.3.2025</div>
                    <div class="update-item">维护 Gather「增加 备用地址」</div>
                    <div class="update-item">维护 Live「增加 备用地址」</div>
                    <div class="update-item">Maintain Sport "Add Alternate Address"</div>
                    <div class="update-item">增加 "广告"「时效 6–24 小时」</div>

                    <div class="update-date">• 7.24.2025</div>
                    <div class="update-item">维护 Sport「修复 部分播放器 失效BUG / 兼容更多播放器」</div>

                    <div class="update-date">• 7.22.2025</div>
                    <div class="update-item">Maintain Live Optimize YouTube/Twitch Proxy</div>
                    <div class="update-item">Maintain Gather "Add Emerald/Wireless News - Pull the Bar at Any Time"</div>

                    <div class="update-date">• 6.23.2025</div>
                    <div class="update-item">Maintain Live Add Failover Mechanism</div>
                    <div class="update-item">维护 Live「更新 周期改为 20 分钟」</div>

                    <div class="update-date">• 6.4.2025</div>
                    <div class="update-item">Maintenance Gather “Add • Migu“ TV ”FHD/HD Channels”</div>
                    <div class="update-item">Maintain Live "Replace Domestic VPS Parsing"</div>
                    <div class="update-item">维护 Sport「增加 两个频道」</div>
                    <div class="update-item">维护 myTV「替换 部分频道 LOGO」</div>
                    <div class="update-item">增加 <a href="https://yang-1989.eu.org/Conversion.php" target="_blank">格式转换</a> <span>「偶尔可能有用」</span>

                </div>

                <strong>㊁ · 使用说明 📘</strong>
                <div class="update-section">
                    <div class="update-item">请在播放器中使用..</div>
                    <div class="update-item">疑难杂症,请移步 Github..</div>
                    <div class="update-item">特殊频道,请保持订阅与播放IP一致..</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentLanguage = 'zh-CN';
        let originalContent = new Map();
        let translationCache = {};
        
        // 翻译缓存管理
        const CACHE_EXPIRATION = 365 * 24 * 60 * 60 * 1000; // 30天，老内容基本不变
        const CACHE_VERSION = '1.0'; // 缓存版本，更新时可以清除旧缓存

        // 加载翻译缓存
        function loadTranslationCache() {
            try {
                const cachedData = window.localStorage.getItem('translationCache');
                if (cachedData) {
                    const parsedData = JSON.parse(cachedData);
                    
                    // 检查缓存版本
                    if (parsedData.version !== CACHE_VERSION) {
                        console.log('缓存版本不匹配，清除旧缓存');
                        clearTranslationCache();
                        return;
                    }
                    
                    // 检查缓存是否过期
                    if (parsedData.timestamp && (Date.now() - parsedData.timestamp < CACHE_EXPIRATION)) {
                        translationCache = parsedData.cache || {};
                        console.log('加载翻译缓存，共', Object.keys(translationCache).length, '条记录');
                    } else {
                        console.log('翻译缓存已过期，清除缓存');
                        clearTranslationCache();
                    }
                }
            } catch (error) {
                console.warn('加载翻译缓存失败:', error);
                clearTranslationCache();
            }
        }

        // 保存翻译缓存
        function saveTranslationCache() {
            try {
                const cacheData = {
                    version: CACHE_VERSION,
                    timestamp: Date.now(),
                    cache: translationCache
                };
                window.localStorage.setItem('translationCache', JSON.stringify(cacheData));
                console.log('翻译缓存已保存，共', Object.keys(translationCache).length, '条记录');
            } catch (error) {
                console.warn('保存翻译缓存失败:', error);
                // 如果存储空间不足，清除一些旧的缓存
                if (error.name === 'QuotaExceededError') {
                    clearOldCache();
                }
            }
        }

        // 清除翻译缓存
        function clearTranslationCache() {
            try {
                window.localStorage.removeItem('translationCache');
                translationCache = {};
                console.log('翻译缓存已清除');
            } catch (error) {
                console.warn('清除翻译缓存失败:', error);
            }
        }

        // 清除旧的缓存条目
        function clearOldCache() {
            const cacheSize = Object.keys(translationCache).length;
            if (cacheSize > 100) {
                // 只保留最近的100条缓存
                const entries = Object.entries(translationCache);
                const recentEntries = entries.slice(-100);
                translationCache = Object.fromEntries(recentEntries);
                saveTranslationCache();
                console.log('清除旧缓存，保留最近100条记录');
            }
        }

        // 获取缓存统计信息
        function getCacheStats() {
            const cacheCount = Object.keys(translationCache).length;
            let cacheSize = 0;
            try {
                cacheSize = JSON.stringify(translationCache).length;
            } catch (e) {
                cacheSize = 'unknown';
            }
            return { count: cacheCount, size: cacheSize };
        }

        // 检测浏览器语言并设置初始语言
        function detectBrowserLanguage() {
            const browserLang = navigator.language || navigator.userLanguage;
            const supportedLangs = ['zh-CN', 'zh-HK', 'en', 'ja', 'ko', 'es', 'fr', 'de', 'ru', 'ar'];
            
            // 特殊处理繁体中文
            if (browserLang.includes('TW') || browserLang.includes('HK') || browserLang.includes('MO')) {
                return 'zh-TW';
            }
            
            // 匹配浏览器语言
            for (let lang of supportedLangs) {
                if (browserLang.startsWith(lang.split('-')[0])) {
                    return lang;
                }
            }
            
            return 'zh-CN'; // 默认简体中文
        }

        // 获取元素的纯文本（不包括子元素）
        function getDirectText(element) {
            let text = '';
            for (let node of element.childNodes) {
                if (node.nodeType === Node.TEXT_NODE) {
                    text += node.textContent;
                }
            }
            return text.trim();
        }

        // 设置元素的纯文本（不影响子元素）
        function setDirectText(element, text) {
            for (let node of element.childNodes) {
                if (node.nodeType === Node.TEXT_NODE && node.textContent.trim()) {
                    node.textContent = text;
                    return;
                }
            }
        }

        // 判断是否应该翻译
        function shouldTranslate(text) {
            if (!text || text.length < 2) return false;
            
            // 排除的内容
            const excludePatterns = [
                /^[×◦]+$/,
                /^\d{4}\.\d{1,2}\.\d{1,2}$/,
                /^[🎬📺🎥📡🚴‍♂️🎞️💻✨📝📘\s]+$/,
                /^(GitHub|Telegram|APTV|TiviMate|YouTube|Twitch|JSON|VPS|LOGO|SSH|DASH|iOS|FHD\/HD|IP|UA|BUG)$/i,
                /https?:\/\//,
                /yang-1989/i
            ];
            
            return !excludePatterns.some(pattern => pattern.test(text));
        }

        // 保存原始内容
        function saveOriginalContent() {
            originalContent.clear();
            
            // 遍历所有可能包含文本的元素
            const walker = document.createTreeWalker(
                document.body,
                NodeFilter.SHOW_ELEMENT,
                {
                    acceptNode: function(node) {
                        // 排除script、style等标签
                        if (['SCRIPT', 'STYLE', 'NOSCRIPT'].includes(node.tagName)) {
                            return NodeFilter.FILTER_REJECT;
                        }
                        return NodeFilter.FILTER_ACCEPT;
                    }
                }
            );

            let node;
            while (node = walker.nextNode()) {
                const directText = getDirectText(node);
                if (directText && shouldTranslate(directText)) {
                    originalContent.set(node, directText);
                }
            }
            
            console.log('保存了', originalContent.size, '个文本元素');
        }

        // 使用Google Translate API进行翻译
        async function translateText(text, targetLang) {
            if (targetLang === 'zh-CN') return text;
            
            const cacheKey = `${text}_${targetLang}`;
            
            // 先检查缓存
            if (translationCache[cacheKey]) {
                return translationCache[cacheKey];
            }

            try {
                // 使用免费的翻译服务
                let targetCode = targetLang.split('-')[0];
                if (targetLang.startsWith('zh-TW') || targetLang.startsWith('zh-HK')) {targetCode = 'zh-TW';}

                const response = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=zh|${targetCode}`);
                const data = await response.json();
                
                if (data.responseData && data.responseData.translatedText) {
                    const translatedText = data.responseData.translatedText;
                    
                    // 保存到缓存
                    translationCache[cacheKey] = translatedText;
                    
                    // 异步保存缓存，不阻塞翻译过程
                    setTimeout(() => {
                        saveTranslationCache();
                    }, 100);
                    
                    return translatedText;
                }
            } catch (error) {
                console.warn('翻译失败，使用原文:', error);
            }
            
            return text;
        }

        // 翻译动态文本（用于弹窗等）
        async function translateDynamicText(text) {
            if (currentLanguage === 'zh-CN') return text;
            return await translateText(text, currentLanguage);
        }

        // 翻译页面内容
        async function translatePage(targetLang) {
            if (targetLang === 'zh-CN') {
                restoreOriginalContent();
                return;
            }

            showTranslatingIndicator();
            document.body.classList.add('translating');

            const promises = [];
            let newTranslations = 0;
            
            for (let [element, originalText] of originalContent) {
                const cacheKey = `${originalText}_${targetLang}`;
                
                // 如果缓存中有翻译，直接使用
                if (translationCache[cacheKey]) {
                    setDirectText(element, translationCache[cacheKey]);
                    continue;
                }
                
                // 否则添加到翻译队列
                const promise = translateText(originalText, targetLang)
                    .then(translatedText => {
                        if (translatedText && translatedText !== originalText) {
                            setDirectText(element, translatedText);
                            newTranslations++;
                        }
                    })
                    .catch(error => {
                        console.warn('翻译失败:', originalText, error);
                    });
                promises.push(promise);
            }

            try {
                await Promise.all(promises);
                console.log('翻译完成，共翻译', promises.length, '个元素，新翻译', newTranslations, '条');
                
                // 如果有新翻译，保存缓存
                if (newTranslations > 0) {
                    saveTranslationCache();
                }
                
                const stats = getCacheStats();
                console.log('缓存统计：', stats.count, '条记录，大小约', Math.round(stats.size / 1024), 'KB');
            } catch (error) {
                console.warn('部分翻译失败:', error);
            }

            hideTranslatingIndicator();
            document.body.classList.remove('translating');
        }

        // 恢复原始内容
        function restoreOriginalContent() {
            for (let [element, originalText] of originalContent) {
                setDirectText(element, originalText);
            }
            console.log('恢复原始内容完成');
        }

        // 显示翻译指示器
        function showTranslatingIndicator() {
            document.getElementById('translatingIndicator').style.display = 'block';
        }

        // 隐藏翻译指示器
        function hideTranslatingIndicator() {
            document.getElementById('translatingIndicator').style.display = 'none';
        }

        // 语言切换函数
        async function changeLanguage(lang) {
            if (lang === currentLanguage) return;
            
            currentLanguage = lang;
            window.localStorage.setItem('selectedLanguage', lang);
            document.documentElement.lang = lang;
            
            await translatePage(lang);
        }

        // 初始化
        window.onload = function() {
            // 首先加载翻译缓存
            loadTranslationCache();
            
            // 延迟保存原始内容，确保模态框内容已渲染
            setTimeout(() => {
                saveOriginalContent();
                
                // 获取保存的语言偏好或检测浏览器语言
                const savedLang = window.localStorage.getItem('selectedLanguage');
                const initialLang = savedLang || detectBrowserLanguage();
                
                document.getElementById('languageSelect').value = initialLang;
                if (initialLang !== 'zh-CN') {
                    changeLanguage(initialLang);
                }
            }, 100);
            
            showUpdateNotice();
        };

        // 原有的功能函数保持不变
        function showUpdateNotice() {
            const modal = document.getElementById('updateModal');
            modal.style.display = 'block';
        }

        function closeUpdateNotice() {
            const modal = document.getElementById('updateModal');
            modal.style.display = 'none';
        }

        async function copySubscriptionLink(link) {
            try {
                await navigator.clipboard.writeText(link);
                const message = await translateDynamicText("订阅链接已复制到剪贴板，请在 播放器 中使用。");
                alert(message);
            } catch (err) {
                console.error('无法复制文本: ', err);
                const errorMsg = await translateDynamicText("复制失败，请手动复制链接。");
                alert(errorMsg);
            }
        }

        async function copySubscriptiontext(text) {
            try {
                await navigator.clipboard.writeText(text);
                const message = await translateDynamicText("已复制脚本命令到剪贴板！请在 SSH 终端中粘贴使用。");
                alert(message);
            } catch (err) {
                console.error('复制失败: ', err);
                const errorMsg = await translateDynamicText("复制失败：") + err;
                alert(errorMsg);
            }
        }

        async function copyMytvLink() {
            const message = await translateDynamicText("你需要一個支援 DASH 協議的播放器，目前 iOS 不支持此媒體。");
            
            if (confirm(message)) {
                copySubscriptionLink("https://tv.iill.top/m3u/MyTV");
            } else {
                const info = await translateDynamicText("支持 DASH 協議的播放器，如影視TV、天光云影、TiviMate 和 OTT 等。");
                alert(info);
            }
        }

        async function copyYsLink() {
            const message = await translateDynamicText("影视 Json 直播订阅地址");
            
            if (confirm(message)) {
                copySubscriptionLink("https://tv.iill.top/json/Gather");
            }
        }

        async function copySportLink() {
            const promptText = await translateDynamicText("请输入作者 GitHub 用户名:");
            
            let githubName = prompt(promptText);
            if (githubName && githubName.toLowerCase() === "yang-1989") {
                copySubscriptionLink('https://tv.iill.top/m3u/Sport');
            } else {
                const errorMsg = await translateDynamicText("验证失败，无法复制订阅地址。");
                alert(errorMsg);
            }
        }

        async function copyShellLink() {
            const message = await translateDynamicText("这是一个与 IPTV 相关项目的搭建脚本，内含小工具等（软路由兼容性不佳）。");
            
            if (confirm(message)) {
                copySubscriptiontext("bash <(curl -sL https://yang-1989.eu.org/NoobIPTV.sh)");
            }
        }
    </script>

</div></body></html>